# layer:((white, black),(move_update))
pieces_and_moves = {
    0: (((0, 3, 4, 5), (3, 4, 5)), (-1, 0)),
    1: (((0, 3, 4), (3, 4)), (-2, 0)),
    2: (((3, 4), (3, 4)), (-3, 0)),
    3: (((3, 4), (3, 4)), (-4, 0)),
    4: (((0, 3, 4), (3, 4)), (-5, 0)),
    5: (((3, 4), (3, 4)), (-6, 0)),
    6: (((3, 4), (3, 4)), (-7, 0)),
    7: (((0, 2, 4, 5), (2, 4, 5)), (-1, 1)),
    8: (((2, 4), (2, 4)), (-2, 2)),
    9: (((2, 4), (2, 4)), (-3, 3)),
    10: (((2, 4), (2, 4)), (-4, 4)),
    11: (((2, 4), (2, 4)), (-5, 5)),
    12: (((2, 4), (2, 4)), (-6, 6)),
    13: (((2, 4), (2, 4)), (-7, 7)),
    14: (((3, 4, 5), (3, 4, 5)), (0, 1)),
    15: (((3, 4, 5), (2, 4, 5)), (0, 2)),
    16: (((3, 4), (3, 4)), (0, 3)),
    17: (((3, 4), (3, 4)), (0, 4)),
    18: (((3, 4), (3, 4)), (0, 5)),
    19: (((3, 4), (3, 4)), (0, 6)),
    20: (((3, 4), (3, 4)), (0, 7)),
    21: (((2, 4, 5), (0, 2, 4, 5)), (1, 1)),
    22: (((2, 4), (2, 4)), (2, 2)),
    23: (((2, 4), (2, 4)), (3, 3)),
    24: (((2, 4), (2, 4)), (4, 4)),
    25: (((2, 4), (2, 4)), (5, 5)),
    26: (((2, 4), (2, 4)), (6, 6)),
    27: (((2, 4), (2, 4)), (7, 7)),
    28: (((3, 4, 5), (3, 4, 5)), (1, 0)),
    29: (((3, 4), (0, 3, 4, 5)), (2, 0)),
    30: (((3, 4), (0, 3, 4)), (3, 0)),
    31: (((3, 4), (3, 4)), (4, 0)),
    32: (((3, 4), (3, 4)), (5, 0)),
    33: (((3, 4), (3, 4)), (6, 0)),
    34: (((3, 4), (3, 4)), (7, 0)),
    35: (((2, 4, 5), (0, 2, 4, 5)), (1, -1)),
    36: (((2, 4), (2, 4)), (2, -2)),
    37: (((2, 4), (2, 4)), (3, -3)),
    38: (((2, 4), (2, 4)), (4, -4)),
    39: (((2, 4), (2, 4)), (5, -5)),
    40: (((2, 4), (2, 4)), (6, -6)),
    41: (((2, 4), (2, 4)), (7, -7)),
    42: (((3, 4, 5), (3, 4, 5)), (0, -1)),
    43: (((3, 4, 5), (3, 4, 5)), (0, -2)),
    44: (((3, 4), (3, 4)), (0, -3)),
    45: (((3, 4), (3, 4)), (0, -4)),
    46: (((3, 4), (3, 4)), (0, -5)),
    47: (((3, 4), (3, 4)), (0, -6)),
    48: (((3, 4), (3, 4)), (0, -7)),
    49: (((0, 2, 4, 5), (2, 4, 5)), (-1, -1)),
    50: (((2, 4), (2, 4)), (-2, -2)),
    51: (((2, 4), (2, 4)), (-3, -3)),
    52: (((2, 4), (2, 4)), (-4, -4)),
    53: (((2, 4), (2, 4)), (-5, -5)),
    54: (((2, 4), (2, 4)), (-6, -6)),
    55: (((2, 4), (2, 4)), (-7, -7)),
    56: (((1), (1)), (-2, 1)),
    57: (((1), (1)), (-1, 2)),
    58: (((1), (1)), (1, 2)),
    59: (((1), (1)), (2, 1)),
    60: (((1), (1)), (2, -1)),
    61: (((1), (1)), (1, -2)),
    62: (((1), (1)), (-1, -2)),
    63: (((1), (1)), (-2, -1)),
    64: (((1), (1)), ((-1, -1), (1, -2))),
    65: (((0), (0)), ((-1, 0), (1, 0))),
    66: (((0), (0)), ((-1, 1), (1, 1))),
    67: (((0), (0)), ((-1, -1), (1, -1))),
    68: (((0), (0)), ((-1, 0), (1, 0))),
    69: (((0), (0)), ((-1, 1), (1, 1))),
    70: (((0), (0)), ((-1, -1), (1, -1))),
    71: (((0), (0)), ((-1, 0), (1, 0))),
    72: (((0), (0)), ((-1, 1), (1, 1))),
}

print(pieces_and_moves)


# 5 move history gamestate
def generate_legal_moves(game_state):
  # first we check tensor for currrent players turn
  turn = game_state[0, 0, 70]  # should be zero or one
  
  # finding pieces
  if turn == 0:
    my_pieces = game_state[:, :, 56:61]
    your_pieces = game_state[:, :, 62:67]
  else:
    my_pieces = game_state[:, :, 62:67]
    your_pieces = game_state[:, :, 56:61]
  # my positions will contain locations of pieces on boaed
  my_positions = my_pieces.indices
  your_positions = your_pieces.indices
  
  for i in range(73): # for each layer we want to check if pieces can move in layer direction
    piece_and_move = pieces_and_moves[i]
    piece_for_this_kind_of_move= piece_and_move[0]
    for piece_x, piece_y, piece_type in my_positions: # for each of my pieces on the board 
      if piece_type in piece_for_this_kind_of_move[turn]:
        # here we know we can move this piece in this direction so test potential location
        potential_piece_x, potential_piece_y = (piece_x, piece_y) + piece_and_move[1] 
        # first check if new location is out of bounds or my piece is blocking
        if not (potential_piece_x>8 or potential_piece_x<0 or potential_piece_y>8 or potential_piece_y<0 or any(potential_piece_x == pos[0] and potential_piece_y == pos[1] for pos in my_positions))
 